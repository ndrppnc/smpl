int itest = 13;
float ftest = 1.0;
char ctest = 'c';
boolean btest = true;

funca(int a, float a2)
{
    int int_funca;
    printf(a, a2);
    /*funcb("abc");*/
}

string validate_args(string arg1, boolean arg2, int arg3, float arg4, char arg5)
{
    int p_test = 0;
    printf("%s, %d, %d, %f, %c \n", arg1, arg2, arg3, arg4, arg5);
    printf("%d\n", p_test);
}

int main(int a, float b)
{
    /* test program */
    {
    int i = 3;
    int j;
    int k;
    float fl = 3.0;
    float fvar = 1000e10;
    fl = i;
    string tester = "This is a string";
    i = (5 + 10);
    funca(itest, ftest);
    if("this" < "not")
        printf("Give error\n");

    return (5);
    int n = (funcb("123"));
    n = (9+5)*(k+i);
    i = btest;
    funca(i, fl);
    string stest;
    int main_int;
    break;
    if(i<10 || i>5)
    {
        i = 9;
        return ((5+3)*funcb("9"));
    } else {
        return funcb("1");
    }
    for(i=10; i< 15.0; i=i+'c')
    {
        printf(itest, ftest, ctest, btest, a, b);
        printf("%s %d\n", stest, 9);
        break;
    }
    while(j < 100) {
        funce();
    }
    lock {
    funca(i,fl);
    funca(j,fl);
    boolean bvar = (((j+k)*i) < n);
    int avar = 0;
    avar = bvar;
    char cvar = 'c';
    funca(avar,(3.0));
    validate_args("", bvar, avar, fvar, cvar);
    spawn funca(i, 5.3);
    }
    barrier;
    printf("This is a string\" \t\n");
    }
}

int funcd(){
return 5;
}

int funce(){
return 6;
}

int funcb (string abc)
{
printf("got it");
funcc();
funcc();
/*funca();*/
}
funcc()
{
return;
}
